{"ast":null,"code":"var _jsxFileName = \"D:\\\\CODE\\\\j_fr_frontend\\\\src\\\\components\\\\nav-link\\\\NavLink.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport React from \"react\";\nimport StyledNavLink from \"./NavLinkStyle\";\n\nconst NavLink = (_ref) => {\n  let {\n    href,\n    as,\n    children,\n    style,\n    className\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"href\", \"as\", \"children\", \"style\", \"className\"]);\n\n  let {\n    pathname\n  } = useRouter();\n\n  const checkRouteMatch = () => {\n    if (href === \"/\") return pathname === href;\n    return pathname.includes(href);\n  };\n\n  return __jsx(Link, {\n    href: href,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, __jsx(StyledNavLink, _extends({\n    className: className,\n    href: href,\n    isCurrentRoute: checkRouteMatch(),\n    style: style\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }), children));\n};\n\nexport default NavLink;","map":{"version":3,"sources":["D:/CODE/j_fr_frontend/src/components/nav-link/NavLink.tsx"],"names":["Link","useRouter","React","StyledNavLink","NavLink","href","as","children","style","className","props","pathname","checkRouteMatch","includes"],"mappings":";;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAA4C,OAA5C;AAGA,OAAOC,aAAP,MAA0B,gBAA1B;;AASA,MAAMC,OAEL,GAAG,UAAwD;AAAA,MAAvD;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,EAAR;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA,KAAtB;AAA6BC,IAAAA;AAA7B,GAAuD;AAAA,MAAZC,KAAY;;AAC1D,MAAI;AAAEC,IAAAA;AAAF,MAAeV,SAAS,EAA5B;;AAEA,QAAMW,eAAe,GAAG,MAAM;AAC5B,QAAIP,IAAI,KAAK,GAAb,EAAkB,OAAOM,QAAQ,KAAKN,IAApB;AAClB,WAAOM,QAAQ,CAACE,QAAT,CAAkBR,IAAlB,CAAP;AACD,GAHD;;AAKA,SACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAEA,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,aAAD;AACE,IAAA,SAAS,EAAEI,SADb;AAEE,IAAA,IAAI,EAAEJ,IAFR;AAGE,IAAA,cAAc,EAAEO,eAAe,EAHjC;AAIE,IAAA,KAAK,EAAEJ;AAJT,KAKME,KALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOGH,QAPH,CADF,CADF;AAaD,CAvBD;;AAyBA,eAAeH,OAAf","sourcesContent":["import Link from \"next/link\";\r\nimport { useRouter } from \"next/router\";\r\nimport React, { AnchorHTMLAttributes } from \"react\";\r\nimport { CSSProperties } from \"styled-components\";\r\nimport { ColorProps, SpaceProps } from \"styled-system\";\r\nimport StyledNavLink from \"./NavLinkStyle\";\r\n\r\nexport interface NavLinkProps extends SpaceProps, ColorProps {\r\n  href: string;\r\n  as?: string;\r\n  style?: CSSProperties;\r\n  className?: string;\r\n}\r\n\r\nconst NavLink: React.FC<\r\n  NavLinkProps & AnchorHTMLAttributes<HTMLAnchorElement>\r\n> = ({ href, as, children, style, className, ...props }) => {\r\n  let { pathname } = useRouter();\r\n\r\n  const checkRouteMatch = () => {\r\n    if (href === \"/\") return pathname === href;\r\n    return pathname.includes(href);\r\n  };\r\n\r\n  return (\r\n    <Link href={href}>\r\n      <StyledNavLink\r\n        className={className}\r\n        href={href}\r\n        isCurrentRoute={checkRouteMatch()}\r\n        style={style}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </StyledNavLink>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default NavLink;\r\n"]},"metadata":{},"sourceType":"module"}