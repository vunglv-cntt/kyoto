{"ast":null,"code":"var _jsxFileName = \"D:\\\\CODE\\\\kyoto-fronend\\\\src\\\\components\\\\sticky\\\\Sticky.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport StyledSticky from \"./SickyStyle\";\n\nvar Sticky = function Sticky(_ref) {\n  _s();\n\n  var fixedOn = _ref.fixedOn,\n      containerRef = _ref.containerRef,\n      children = _ref.children,\n      notifyPosition = _ref.notifyPosition,\n      notifyOnScroll = _ref.notifyOnScroll,\n      onSticky = _ref.onSticky;\n\n  var _useState = useState(false),\n      fixed = _useState[0],\n      setFixed = _useState[1];\n\n  var _useState2 = useState(0),\n      parentHeight = _useState2[0],\n      setParentHeight = _useState2[1];\n\n  var elementRef = useRef(null);\n  var positionRef = useRef(null);\n  var scrollListener = useCallback(function () {\n    if (!window) return;\n    var distance = window.pageYOffset - positionRef.current;\n\n    if (containerRef !== null && containerRef !== void 0 && containerRef.current) {\n      var _containerRef$current;\n\n      var containerDistance = containerRef.current.offsetTop + ((_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.offsetHeight) - window.pageYOffset;\n\n      if (notifyPosition && notifyOnScroll) {\n        notifyOnScroll(distance <= notifyPosition && containerDistance > notifyPosition);\n      }\n\n      return setFixed(distance <= fixedOn && containerDistance > fixedOn);\n    }\n\n    if (notifyPosition && notifyOnScroll) {\n      notifyOnScroll(distance >= notifyPosition);\n    }\n\n    var isFixed = distance >= fixedOn;\n    setFixed(isFixed);\n  }, []);\n  useEffect(function () {\n    if (!window) return;\n    window.addEventListener(\"scroll\", scrollListener);\n    window.addEventListener(\"resize\", scrollListener);\n    return function () {\n      window.removeEventListener(\"scroll\", scrollListener);\n      window.removeEventListener(\"resize\", scrollListener);\n    };\n  }, []);\n  useEffect(function () {\n    var _elementRef$current2;\n\n    if (!positionRef.current) {\n      var _elementRef$current;\n\n      positionRef.current = (_elementRef$current = elementRef.current) === null || _elementRef$current === void 0 ? void 0 : _elementRef$current.offsetTop;\n    }\n\n    setParentHeight(((_elementRef$current2 = elementRef.current) === null || _elementRef$current2 === void 0 ? void 0 : _elementRef$current2.offsetHeight) || 0);\n  }, [elementRef.current, children]);\n  useEffect(function () {\n    if (onSticky) onSticky(fixed);\n  }, [fixed]);\n  return __jsx(StyledSticky, {\n    componentPosition: positionRef.current,\n    componentHeight: parentHeight,\n    fixedOn: fixedOn,\n    fixed: fixed,\n    ref: elementRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.cloneElement(children, {\n    isFixed: fixed\n  }));\n};\n\n_s(Sticky, \"rezHlI7xX4x64zlguFZ9kkYJwnE=\");\n\n_c = Sticky;\nexport default Sticky;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sticky\");","map":{"version":3,"sources":["D:/CODE/kyoto-fronend/src/components/sticky/Sticky.tsx"],"names":["React","useCallback","useEffect","useRef","useState","StyledSticky","Sticky","fixedOn","containerRef","children","notifyPosition","notifyOnScroll","onSticky","fixed","setFixed","parentHeight","setParentHeight","elementRef","positionRef","scrollListener","window","distance","pageYOffset","current","containerDistance","offsetTop","offsetHeight","isFixed","addEventListener","removeEventListener","cloneElement"],"mappings":"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","sourcesContent":["import React, {\r\n  ReactElement,\r\n  useCallback,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport StyledSticky from \"./SickyStyle\";\r\n\r\nexport interface StickyProps {\r\n  fixedOn: number;\r\n  containerRef?: { current: any };\r\n  children?: ReactElement;\r\n  onSticky?: (isFixed: boolean) => void;\r\n  notifyOnScroll?: (hasReachedPosition: boolean) => void;\r\n  notifyPosition?: number;\r\n}\r\n\r\nconst Sticky: React.FC<StickyProps> = ({\r\n  fixedOn,\r\n  containerRef,\r\n  children,\r\n  notifyPosition,\r\n  notifyOnScroll,\r\n  onSticky,\r\n}) => {\r\n  const [fixed, setFixed] = useState(false);\r\n  const [parentHeight, setParentHeight] = useState(0);\r\n  const elementRef = useRef(null);\r\n  const positionRef = useRef(null);\r\n\r\n  const scrollListener = useCallback(() => {\r\n    if (!window) return;\r\n\r\n    let distance = window.pageYOffset - positionRef.current;\r\n\r\n    if (containerRef?.current) {\r\n      let containerDistance =\r\n        containerRef.current.offsetTop +\r\n        containerRef.current?.offsetHeight -\r\n        window.pageYOffset;\r\n\r\n      if (notifyPosition && notifyOnScroll) {\r\n        notifyOnScroll(\r\n          distance <= notifyPosition && containerDistance > notifyPosition\r\n        );\r\n      }\r\n      return setFixed(distance <= fixedOn && containerDistance > fixedOn);\r\n    }\r\n\r\n    if (notifyPosition && notifyOnScroll) {\r\n      notifyOnScroll(distance >= notifyPosition);\r\n    }\r\n\r\n    let isFixed = distance >= fixedOn;\r\n    setFixed(isFixed);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!window) return;\r\n\r\n    window.addEventListener(\"scroll\", scrollListener);\r\n    window.addEventListener(\"resize\", scrollListener);\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", scrollListener);\r\n      window.removeEventListener(\"resize\", scrollListener);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!positionRef.current) {\r\n      positionRef.current = elementRef.current?.offsetTop;\r\n    }\r\n    setParentHeight(elementRef.current?.offsetHeight || 0);\r\n  }, [elementRef.current, children]);\r\n\r\n  useEffect(() => {\r\n    if (onSticky) onSticky(fixed);\r\n  }, [fixed]);\r\n\r\n  return (\r\n    <StyledSticky\r\n      componentPosition={positionRef.current}\r\n      componentHeight={parentHeight}\r\n      fixedOn={fixedOn}\r\n      fixed={fixed}\r\n      ref={elementRef}\r\n    >\r\n      {React.cloneElement(children, { isFixed: fixed })}\r\n    </StyledSticky>\r\n  );\r\n};\r\n\r\nexport default Sticky;\r\n"]},"metadata":{},"sourceType":"module"}