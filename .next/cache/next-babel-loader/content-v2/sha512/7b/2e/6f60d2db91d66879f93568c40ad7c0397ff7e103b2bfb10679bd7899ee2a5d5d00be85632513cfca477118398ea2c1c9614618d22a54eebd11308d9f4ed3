{"ast":null,"code":"import _extends from \"D:/CODE/j_fr_frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"D:/CODE/j_fr_frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"D:\\\\CODE\\\\j_fr_frontend\\\\src\\\\components\\\\text-field\\\\TextField.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { cloneElement, useEffect, useState } from \"react\";\nimport Box from \"../Box\";\nimport { SyledTextField, TextFieldWrapper } from \"./TextFieldStyle\";\n\nvar TextField = function TextField(_ref) {\n  _s();\n\n  var id = _ref.id,\n      label = _ref.label,\n      errorText = _ref.errorText,\n      labelColor = _ref.labelColor,\n      endAdornment = _ref.endAdornment,\n      props = _objectWithoutProperties(_ref, [\"id\", \"label\", \"errorText\", \"labelColor\", \"endAdornment\"]);\n\n  var _useState = useState(id),\n      textId = _useState[0],\n      setTextId = _useState[1]; // extract spacing props\n\n\n  var spacingProps = {};\n\n  for (var key in props) {\n    if (key.startsWith(\"m\") || key.startsWith(\"p\")) spacingProps[key] = props[key];\n  }\n\n  useEffect(function () {\n    if (!id) setTextId(Math.random());\n  }, []);\n  return __jsx(TextFieldWrapper, _extends({\n    color: labelColor && \"\".concat(labelColor, \".main\"),\n    fullwidth: props.fullwidth\n  }, spacingProps, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }), label && __jsx(\"label\", {\n    htmlFor: textId,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }, label), __jsx(Box, {\n    position: \"relative\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, __jsx(SyledTextField, _extends({\n    id: textId\n  }, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  })), endAdornment && /*#__PURE__*/cloneElement(endAdornment, {\n    className: \"end-adornment \".concat(endAdornment.className)\n  })), errorText && __jsx(\"small\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, errorText));\n};\n\n_s(TextField, \"+i+cm0w0iIWBOB/719Pzz3gd28Q=\");\n\n_c = TextField;\nTextField.defaultProps = {\n  color: \"default\"\n};\nexport default TextField;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextField\");","map":{"version":3,"sources":["D:/CODE/j_fr_frontend/src/components/text-field/TextField.tsx"],"names":["cloneElement","useEffect","useState","Box","SyledTextField","TextFieldWrapper","TextField","id","label","errorText","labelColor","endAdornment","props","textId","setTextId","spacingProps","key","startsWith","Math","random","fullwidth","className","defaultProps","color"],"mappings":";;;;;;;;;AAAA,SAASA,YAAT,EAA4CC,SAA5C,EAAuDC,QAAvD,QAAuE,OAAvE;AAGA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,cAAT,EAAyBC,gBAAzB,QAAiD,kBAAjD;;AAWA,IAAMC,SAEL,GAAG,SAFEA,SAEF,OAAkE;AAAA;;AAAA,MAA/DC,EAA+D,QAA/DA,EAA+D;AAAA,MAA3DC,KAA2D,QAA3DA,KAA2D;AAAA,MAApDC,SAAoD,QAApDA,SAAoD;AAAA,MAAzCC,UAAyC,QAAzCA,UAAyC;AAAA,MAA7BC,YAA6B,QAA7BA,YAA6B;AAAA,MAAZC,KAAY;;AAAA,kBACxCV,QAAQ,CAACK,EAAD,CADgC;AAAA,MAC7DM,MAD6D;AAAA,MACrDC,SADqD,iBAGpE;;;AACA,MAAIC,YAAY,GAAG,EAAnB;;AACA,OAAK,IAAMC,GAAX,IAAkBJ,KAAlB,EAAyB;AACvB,QAAII,GAAG,CAACC,UAAJ,CAAe,GAAf,KAAuBD,GAAG,CAACC,UAAJ,CAAe,GAAf,CAA3B,EACEF,YAAY,CAACC,GAAD,CAAZ,GAAoBJ,KAAK,CAACI,GAAD,CAAzB;AACH;;AAEDf,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACM,EAAL,EAASO,SAAS,CAACI,IAAI,CAACC,MAAL,EAAD,CAAT;AACV,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE,MAAC,gBAAD;AACE,IAAA,KAAK,EAAET,UAAU,cAAOA,UAAP,UADnB;AAEE,IAAA,SAAS,EAAEE,KAAK,CAACQ;AAFnB,KAGML,YAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKGP,KAAK,IAAI;AAAO,IAAA,OAAO,EAAEK,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyBL,KAAzB,CALZ,EAME,MAAC,GAAD;AAAK,IAAA,QAAQ,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,cAAD;AAAgB,IAAA,EAAE,EAAEK;AAApB,KAAgCD,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAEGD,YAAY,iBACXX,YAAY,CAACW,YAAD,EAAe;AACzBU,IAAAA,SAAS,0BAAmBV,YAAY,CAACU,SAAhC;AADgB,GAAf,CAHhB,CANF,EAaGZ,SAAS,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQA,SAAR,CAbhB,CADF;AAiBD,CAjCD;;GAAMH,S;;KAAAA,S;AAmCNA,SAAS,CAACgB,YAAV,GAAyB;AACvBC,EAAAA,KAAK,EAAE;AADgB,CAAzB;AAIA,eAAejB,SAAf","sourcesContent":["import { cloneElement, InputHTMLAttributes, useEffect, useState } from \"react\";\r\nimport { SpaceProps } from \"styled-system\";\r\nimport { colorOptions } from \"../../interfaces\";\r\nimport Box from \"../Box\";\r\nimport { SyledTextField, TextFieldWrapper } from \"./TextFieldStyle\";\r\n\r\nexport interface TextFieldProps {\r\n  labelColor?: colorOptions;\r\n  label?: string;\r\n  errorText?: any;\r\n  id?: any;\r\n  fullwidth?: boolean;\r\n  endAdornment?: any;\r\n}\r\n\r\nconst TextField: React.FC<\r\n  InputHTMLAttributes<HTMLInputElement> & TextFieldProps & SpaceProps\r\n> = ({ id, label, errorText, labelColor, endAdornment, ...props }) => {\r\n  const [textId, setTextId] = useState(id);\r\n\r\n  // extract spacing props\r\n  let spacingProps = {};\r\n  for (const key in props) {\r\n    if (key.startsWith(\"m\") || key.startsWith(\"p\"))\r\n      spacingProps[key] = props[key];\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!id) setTextId(Math.random());\r\n  }, []);\r\n\r\n  return (\r\n    <TextFieldWrapper\r\n      color={labelColor && `${labelColor}.main`}\r\n      fullwidth={props.fullwidth}\r\n      {...spacingProps}\r\n    >\r\n      {label && <label htmlFor={textId}>{label}</label>}\r\n      <Box position=\"relative\">\r\n        <SyledTextField id={textId} {...props} />\r\n        {endAdornment &&\r\n          cloneElement(endAdornment, {\r\n            className: `end-adornment ${endAdornment.className}`,\r\n          })}\r\n      </Box>\r\n      {errorText && <small>{errorText}</small>}\r\n    </TextFieldWrapper>\r\n  );\r\n};\r\n\r\nTextField.defaultProps = {\r\n  color: \"default\",\r\n};\r\n\r\nexport default TextField;\r\n"]},"metadata":{},"sourceType":"module"}